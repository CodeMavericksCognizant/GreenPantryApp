@page "/editfood/{Id}"
@using GreenPantryApp.Shared
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
<h2>Edit Person</h2>
<div class="row">
    <div class="col-md-6">
        <div class="form-group">
            <label for="GroceryItem"> Food Item *</label>
            <input form="GroceryItem" class="form-control" @bind="@food.GroceryItem" />
        </div>
    </div>
    <div class="col-md-6">
        <div class="form-group">
            <label for="PurchaseDate"> Purchase Date *</label>
            <input form="PurchaseDate" class="form-control" @bind="@food.PurchaseDate" />
        </div>
    </div>
    <div class="col-md-6">
        <div class="form-group">
            <label for="ExpirationDate"> Expiration Date *</label>
            <input form="ExpirationDate" class="form-control" @bind="@food.ExpirationDate" />
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-4">
        <div class="form-group">
            <input type="button" class="btn btn-primary" @onclick="@Save" value="Save" />
            <input type="button" class="btn" @onclick="@Cancel" value="Cancel" />
        </div>
    </div>
</div>
@code {
    [Parameter]
    public string Id { get; set; }
    GroceryViewModel food = new GroceryViewModel();
    protected override async Task OnInitializedAsync()
    {
        food = await Http.GetFromJsonAsync<GroceryViewModel>("api/Foods/" + Id);
    }
    protected async Task Save()
    {
        var response = await Http.PutAsJsonAsync("api/Foods/" + Id, @food);
        bool foodResponse = await response.Content.ReadFromJsonAsync<bool>();
        if (foodResponse)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Updated Successfully!");
            NavigationManager.NavigateTo("grocerylist");
        }
    }
    void Cancel()
    {
        NavigationManager.NavigateTo("grocerylist");
    }
}