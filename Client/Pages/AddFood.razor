@page "/addfood"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using GreenPantryApp.Shared
@using System.Net
@attribute [Authorize]
@inject HttpClient _httpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider

<h2 class="align-content-lg-center ">Add Food</h2>
<table class="table table-hover table-borderless">
<div class="row">
    <div class="col-md-6">
        <div class="form-group">
            <label for="GroceryItem"> Food Item *</label>
            <input form="GroceryItem" class="form-control" @bind="@food.GroceryItem" />
        </div>
    </div>
    <div class="col-md-6">
        <div class="form-group">
            <label for="PurchaseDate"> Purchase Date *</label>
            <input form="PurchaseDate" class="form-control" @bind="@food.PurchaseDate" />
        </div>
    </div>
    <div class="col-md-6">
        <div class="form-group">
            <label for="ExpirationDate"> Expiration Date *</label>
            <input form="ExpirationDate" class="form-control" @bind="@food.ExpirationDate" />
        </div>
    </div>
    <div class="col-md-6">
        <div class="form-group">
            <label for="Cost"> Cost *</label>
            <input form="Cost" class="form-control" @bind="@food.Cost" />
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-4">
        <div class="form-group">
            <input type="button" class="btn btn-primary" @onclick="@Save" value="Save" />
            <input type="button" class="btn" @onclick="@Cancel" value="Cancel" />
        </div>
    </div>
</div>
</table>
@code {
    GroceryViewModel food = new GroceryViewModel();
    private string userId;
    override protected async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider
                    .GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            userId = user.Identity.Name;
        }
    }

    protected async Task Save()
    {
        food.UserId = userId;
        var response = await _httpClient.PostAsJsonAsync("api/Foods", @food);
        GroceryViewModel personResponse = await response.Content.ReadFromJsonAsync<GroceryViewModel>() ?? throw new InvalidOperationException();
        if (personResponse?.Id > 0)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Saved Successfully!");
            NavigationManager.NavigateTo("groceryList");
        }
    }
    void Cancel()
    {
        NavigationManager.NavigateTo("groceryList");
    }
}