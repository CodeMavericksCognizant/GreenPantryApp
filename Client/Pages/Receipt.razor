@page "/receipt"
@using System.IO
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using System.Net.Http.Headers
@using System.Net.Http
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using GreenPantryApp.Shared
@using System.Net
@attribute [Authorize]
@inject HttpClient _httpClient
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject IJSRuntime JsRuntime
<style>
	.container {
		display: flex;
		flex-direction: column;
		align-items: center;
	}



	hr {
		border: none;
		height: 5px;
		background-color: darkgreen;
		margin: 20px 0;
	}
</style>
<div class="container">
<h1>Upload a Receipt</h1>

<!-- Create an input element that allows users to select receipt images -->
<InputFile accept="images/*" OnChange="@OnFileSelected" required />

<!-- Create a button element that allows users to upload receipt images -->
<button type="button" class="btn btn-primary" @onclick="OnFileUpload">Upload</button>

<!-- Create a div that displays the extracted data from the receipt image -->
<div>
     @if (result != null)
    {
        <h3>Items found</h3>
        <table class="table-bordered">
            <thead>
                <tr>
                    <th width = "80%">Grocery Item</th>
                    <th width="20%">Cost</th>
                </tr>
            </thead>
            <tbody>
   
                @foreach (var lineItem in result)
                {
                    <tr>
                        <td>
                            @lineItem["description"].ToString()
                        </td>
                        <td>@lineItem["total_amount"].ToString("C2")</td>
                        

                    </tr>
                }
            </tbody>
        </table>
        <button type="button" class="btn btn-primary" @onclick="AddAllItems">Add Items</button>


    }
</div>
</div>

@code {
    private readonly string _apiKey = "f120c44f2a4223caad80a4cf96098978"; 
    private string userId;
    private IBrowserFile file;
    dynamic result;
    private DateTime purchaseDate;

    private async void OnFileSelected(InputFileChangeEventArgs e)
    {

        file = e.File;

    }

    // Define an async method that handles the file upload event
    private async Task OnFileUpload()
    {
        // Check if the file is not null and has a valid size
        if (file != null && file.Size > 0)
        {
            try
            {
                var tempPath = Path.Combine("wwwroot", "images");
                if (!Directory.Exists(tempPath))
                {
                    Directory.CreateDirectory(tempPath);
                }
                var filePath = Path.Combine("wwwroot", "images" , file.Name);

                using (var stream = new FileStream(filePath, FileMode.Create))
                {
                    await file.OpenReadStream().CopyToAsync(stream);
                }
                await JsRuntime.InvokeVoidAsync("alert", "Successful upload.");

                // Call the Mindee Receipt OCR API with the file path
                CallMindeeReceiptOcrApi(filePath);
                // Trigger a UI update
                StateHasChanged();
            }
            catch (Exception exp)
            {
                Console.WriteLine(exp.Message + " " + exp.StackTrace);
            }
        }
        else
        {
            // Display an error message in an alert box
            await JsRuntime.InvokeVoidAsync("alert", "Invalid file.");
        }
    }

    // Define an async method that calls the Mindee Receipt OCR API with a file path
    private async void CallMindeeReceiptOcrApi(string filePath)
    {

        using (var httpClient = new HttpClient())
        {
            using (var request = new HttpRequestMessage(new HttpMethod("POST"), "https://api.mindee.net/v1/products/mindee/expense_receipts/v5/predict"))
            {
                request.Headers.TryAddWithoutValidation("Authorization", "Token f120c44f2a4223caad80a4cf96098978");

                var multipartContent = new MultipartFormDataContent();
                multipartContent.Add(new ByteArrayContent(File.ReadAllBytes(filePath)), "document", Path.GetFileName(filePath));
                request.Content = multipartContent;

                var response = await httpClient.SendAsync(request);
                string temp = await response.Content.ReadAsStringAsync();
                if (response != null)
                {

                    await JsRuntime.InvokeVoidAsync("alert", "Success. \nResults Loading");


                    var parsedResponse = JObject.Parse(temp);
                    var tempDate = parsedResponse["document"]["inference"]["prediction"]["date"]["value"].ToString();
                    if(!String.IsNullOrEmpty(tempDate))
                    {
                        purchaseDate = DateTime.Parse(tempDate);
                    }
                    else
                    {
                        purchaseDate = DateTime.Now;
                    }

                    result = parsedResponse["document"]["inference"]["prediction"]["line_items"];
                    
                    StateHasChanged();

                }


            }
        }
    }
    private async void AddAllItems()
    {
        foreach (var lineItem in result)
        {
            GroceryViewModel food = new GroceryViewModel();
            food.UserId = userId;
            food.GroceryItem = lineItem["description"].ToString();
            food.PurchaseDate = purchaseDate;
            food.ExpirationDate = purchaseDate.AddDays(14);
            food.Cost = lineItem["total_amount"];
            var response = await _httpClient.PostAsJsonAsync("api/Foods", @food);

        }
        NavigationManager.NavigateTo("groceryList");


    }
  
    
    override protected async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider
                    .GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            userId = user.Identity.Name;
        }
    }

    
}
